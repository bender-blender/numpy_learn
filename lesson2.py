import numpy as np
#-------------------------------
#* Функции автозаполнение
a = np.empty(10,"int8") #TODO Возвращает новый массив с заданного размера и типа 
print(a)

b = np.eye(4,4) #TODO Возвращает массив размером N*M с единичными диагональными элементами
print(b)

c = np.identity(4) #TODO Возвращает квадратный массив 
print(c)

d = np.ones(4) #TODO Возвращает массив из n единиц
print(d)

e = np.zeros(4) #TODO Возвращает массив из n нулей
print(e)

f = np.full(4,[1,2,3,4]) #TODO Возвращает массив заданного размера n и типа со значением value
print(f)

#-------------------------------
#* Функции создания матриц

g = np.mat(np.array([[1,2,3,4],[5,6,7,8]])) #TODO Приводит входные данные к матрице
print(g)


h = np.diag([1,2,3,4]) #TODO Формирует диагональную матрицу на основе списка или массива 
print(h)

i = np.diagflat(np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])) #TODO Формирует  диагональную матрицу на основе списка или массива 
#TODO Который сначала сжимает до одной оси
print(i)

j = np.tri(3,3) #TODO Создает треугольный массив N*M с единицами на главной диагонали
#TODO и ниже её
print(j)

k = np.tril(np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))#TODO Преобразует двухмерный список или массив в треугольную
#TODO матрицу с нулевыми элементами выше главной диагонали 
print(k)

n = np.triu(np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))#! Тоже самое, что и trill, только нули снизу
print(n)
#-------------------------------
#* Функции создания числовых диапазонов

p = np.arange(1,5,0.1) #TODO Возвращает одномерный массив с равномерно 
print(p) #TODO разнесенными числами указанного типа данных
#! Отличие от range - возможность работы с вещественными числами


o = np.linspace(1,10) #TODO Возвращает одномерный массив с равномерно
print(o) #TODO разнесенными числами указанного. Используя только значения начал и конца интервала


r = np.geomspace(1,10) #TODO формирования чисел по геометрической прогрессии
print(r)

